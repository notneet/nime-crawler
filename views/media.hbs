<div class="container py-6 min-h-screen">
  <!-- Header -->
  <div class="flex justify-between items-center mb-6">
    <h1 class="text-2xl font-bold text-gray-900">Media Management</h1>
    <button
      onclick="openModal()"
      class="bg-indigo-600 text-white px-4 py-2 rounded-md hover:bg-indigo-700 transition-colors"
    >
      Add New Media
    </button>
  </div>

  <!-- Table -->
  <div class="bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">URL</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created At</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Updated At</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          {{#each mediaList}}
            <tr>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{this.id}}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{this.name}}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                <a href="{{this.url}}" target="_blank" class="text-indigo-600 hover:text-indigo-900">
                  {{truncateUrl this.url}}
                </a>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{formatDate this.created_at}}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{{formatDate this.updated_at}}</td>
              <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                <button 
                  onclick="editMedia('{{this.id}}')"
                  class="text-indigo-600 hover:text-indigo-900 mr-2"
                >
                  Edit
                </button>
                <button 
                  onclick="deleteMedia('{{this.id}}')"
                  class="text-red-600 hover:text-red-900"
                >
                  Delete
                </button>
              </td>
            </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Modal -->
  <div id="mediaModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 hidden">
    <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 transition-opacity" aria-hidden="true"></div>
      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
        <form id="mediaForm" onsubmit="handleSubmit(event)">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div class="mb-4">
              <h3 class="text-lg leading-6 font-medium text-gray-900" id="modalTitle">Add New Media</h3>
            </div>
            <!-- Hidden ID field for updates -->
            <input type="hidden" id="mediaId" name="id">
            
            <div class="mb-4">
              <label for="name" class="block text-sm font-medium text-gray-700">Name</label>
              <input
                type="text"
                name="name"
                id="name"
                required
                class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
              >
              <div id="nameError" class="mt-1 text-sm text-red-600 hidden"></div>
            </div>

            <div class="mb-4">
              <label for="url" class="block text-sm font-medium text-gray-700">URL</label>
              <input
                type="url"
                name="url"
                id="url"
                required
                class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
              >
              <div id="urlError" class="mt-1 text-sm text-red-600 hidden"></div>
            </div>
          </div>

          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="submit"
              class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Save
            </button>
            <button
              type="button"
              onclick="closeModal()"
              class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm"
            >
              Cancel
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Toast Notification -->
  <div id="toast" class="fixed bottom-4 right-4 px-4 py-2 bg-green-500 text-white rounded-md shadow-lg transform transition-all duration-300 hidden">
    Operation successful!
  </div>
</div>

<script>
  const modal = document.getElementById('mediaModal');
  const form = document.getElementById('mediaForm');
  const toast = document.getElementById('toast');

  function showToast(message, isError = false) {
    toast.textContent = message;
    toast.classList.remove('hidden', 'bg-green-500', 'bg-red-500');
    toast.classList.add(isError ? 'bg-red-500' : 'bg-green-500');
    toast.classList.remove('hidden');
    setTimeout(() => {
      toast.classList.add('hidden');
    }, 3000);
  }

  function openModal(id = null) {
    resetForm();
    if (id) {
      document.getElementById('modalTitle').textContent = 'Edit Media';
      fetchMedia(id);
    } else {
      document.getElementById('modalTitle').textContent = 'Add New Media';
    }
    modal.classList.remove('hidden');
  }

  function closeModal() {
    modal.classList.add('hidden');
    resetForm();
  }

  function resetForm() {
    form.reset();
    document.getElementById('mediaId').value = '';
    document.getElementById('nameError').classList.add('hidden');
    document.getElementById('urlError').classList.add('hidden');
  }

  async function fetchMedia(id) {
    try {
      const response = await fetch(`/api/media/${id}`);
      if (!response.ok) throw new Error('Failed to fetch media');
      
      const media = await response.json();
      document.getElementById('mediaId').value = media.id;
      document.getElementById('name').value = media.name;
      document.getElementById('url').value = media.url;
    } catch (error) {
      showToast('Failed to fetch media details', true);
    }
  }

  function editMedia(id) {
    openModal(id);
  }

  async function deleteMedia(id) {
    if (!confirm('Are you sure you want to delete this media?')) return;

    try {
      const response = await fetch(`/api/media/${id}`, {
        method: 'DELETE',
      });

      if (!response.ok) throw new Error('Failed to delete media');

      showToast('Media deleted successfully');
      setTimeout(() => window.location.reload(), 1000);
    } catch (error) {
      showToast('Failed to delete media', true);
    }
  }

  async function handleSubmit(event) {
    event.preventDefault();
    
    const formData = new FormData(form);
    const data = Object.fromEntries(formData);
    const id = data.id;
    delete data.id;

    const isUpdate = Boolean(id);
    const url = isUpdate ? `/api/media/${id}` : '/api/media';
    const method = isUpdate ? 'PUT' : 'POST';

    try {
      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || 'Operation failed');
      }

      showToast(`Media ${isUpdate ? 'updated' : 'created'} successfully`);
      setTimeout(() => window.location.reload(), 1000);
    } catch (error) {
      showToast(error.message || 'Operation failed', true);
    }
  }

  // Close modal when clicking outside
  modal.addEventListener('click', (e) => {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeModal();
    }
  });
</script>